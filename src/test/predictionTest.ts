import { PredictionService } from '../services/predictionService';
import { SyncService } from '../services/syncService';
import { XGBoostModel } from '../services/xgboostModel';
import { RNNLSTMModel } from '../services/rnnLstmModel';
import { FeatureEngineering } from '../services/mlModels';

/**
 * Tests pour le syst√®me de pr√©diction avanc√©
 */
export class PredictionTestSuite {
  
  /**
   * Test de base du service de pr√©diction
   */
  static async testBasicPrediction(): Promise<boolean> {
    console.log('üß™ Test de base du service de pr√©diction...');
    
    try {
      // R√©cup√©rer des donn√©es de test
      const results = await SyncService.getDrawResults('Cash', 100);
      
      if (results.length < 30) {
        console.warn('‚ö†Ô∏è Donn√©es insuffisantes pour le test');
        return false;
      }
      
      // Tester la pr√©diction hybride
      const prediction = await PredictionService.generatePrediction(
        'Cash',
        results,
        'Hybrid'
      );
      
      // V√©rifications
      const isValid = 
        prediction.numbers.length === 5 &&
        prediction.confidence > 0 &&
        prediction.confidence <= 1 &&
        prediction.numbers.every(num => 
          num.number >= 1 && 
          num.number <= 90 && 
          num.probability > 0 && 
          num.probability <= 1
        );
      
      console.log(`‚úÖ Pr√©diction g√©n√©r√©e: ${prediction.numbers.map(n => n.number).join(', ')}`);
      console.log(`üìä Confiance: ${(prediction.confidence * 100).toFixed(1)}%`);
      console.log(`ü§ñ Algorithme: ${prediction.algorithm}`);
      
      return isValid;
      
    } catch (error) {
      console.error('‚ùå Erreur lors du test de pr√©diction:', error);
      return false;
    }
  }

  /**
   * Test de l'ing√©nierie des features
   */
  static async testFeatureEngineering(): Promise<boolean> {
    console.log('üî¨ Test de l\'ing√©nierie des features...');
    
    try {
      const results = await SyncService.getDrawResults('R√©veil', 50);
      
      if (results.length < 20) {
        console.warn('‚ö†Ô∏è Donn√©es insuffisantes pour le test des features');
        return false;
      }
      
      // Extraire les features
      const features = FeatureEngineering.extractFeatures(results, 20);
      
      // V√©rifications
      const isValid = 
        features.frequencies.length === 90 &&
        features.gaps.length === 90 &&
        features.momentum.length === 90 &&
        features.volatility.length === 90 &&
        features.temporalTrends.length === 90 &&
        features.cyclicalFeatures.length === 90 &&
        features.seasonality.length === 90;
      
      console.log('‚úÖ Features extraites:');
      console.log(`  - Fr√©quences: ${features.frequencies.filter(f => f > 0).length} num√©ros actifs`);
      console.log(`  - √âcarts: ${features.gaps.filter(g => g > 0).length} num√©ros avec √©carts`);
      console.log(`  - Momentum: ${features.momentum.filter(m => m > 0.1).length} num√©ros avec momentum √©lev√©`);
      
      return isValid;
      
    } catch (error) {
      console.error('‚ùå Erreur lors du test des features:', error);
      return false;
    }
  }

  /**
   * Test du mod√®le XGBoost
   */
  static async testXGBoostModel(): Promise<boolean> {
    console.log('üå≥ Test du mod√®le XGBoost...');
    
    try {
      const results = await SyncService.getDrawResults('Cash', 100);
      
      if (results.length < 50) {
        console.warn('‚ö†Ô∏è Donn√©es insuffisantes pour l\'entra√Ænement XGBoost');
        return false;
      }
      
      // Cr√©er et entra√Æner le mod√®le
      const model = new XGBoostModel({
        epochs: 20, // R√©duit pour le test
        batchSize: 16,
        hiddenUnits: 64
      });
      
      console.log('üéØ Entra√Ænement du mod√®le XGBoost...');
      const metrics = await model.train(results);
      
      console.log(`üìà M√©triques d'entra√Ænement:`);
      console.log(`  - Pr√©cision: ${(metrics.accuracy * 100).toFixed(1)}%`);
      console.log(`  - F1-Score: ${(metrics.f1Score * 100).toFixed(1)}%`);
      
      // Test de pr√©diction
      const predictions = await model.predict(results);
      
      const isValid = 
        predictions.length > 0 &&
        predictions.every(pred => 
          pred.number >= 1 && 
          pred.number <= 90 && 
          pred.probability > 0 && 
          pred.probability <= 1
        );
      
      console.log(`üéØ Pr√©dictions XGBoost: ${predictions.slice(0, 5).map(p => `${p.number}(${(p.probability * 100).toFixed(1)}%)`).join(', ')}`);
      
      // Nettoyer
      model.dispose();
      
      return isValid && metrics.accuracy > 0;
      
    } catch (error) {
      console.error('‚ùå Erreur lors du test XGBoost:', error);
      return false;
    }
  }

  /**
   * Test du mod√®le RNN-LSTM
   */
  static async testRNNLSTMModel(): Promise<boolean> {
    console.log('üß† Test du mod√®le RNN-LSTM...');
    
    try {
      const results = await SyncService.getDrawResults('R√©veil', 80);
      
      if (results.length < 40) {
        console.warn('‚ö†Ô∏è Donn√©es insuffisantes pour l\'entra√Ænement LSTM');
        return false;
      }
      
      // Cr√©er et entra√Æner le mod√®le
      const model = new RNNLSTMModel({
        epochs: 15, // R√©duit pour le test
        batchSize: 8,
        hiddenUnits: 128,
        sequenceLength: 15
      });
      
      console.log('üéØ Entra√Ænement du mod√®le RNN-LSTM...');
      const metrics = await model.train(results);
      
      console.log(`üìà M√©triques d'entra√Ænement:`);
      console.log(`  - Pr√©cision: ${(metrics.accuracy * 100).toFixed(1)}%`);
      console.log(`  - F1-Score: ${(metrics.f1Score * 100).toFixed(1)}%`);
      
      // Test de pr√©diction
      const predictions = await model.predict(results);
      
      const isValid = 
        predictions.length > 0 &&
        predictions.every(pred => 
          pred.number >= 1 && 
          pred.number <= 90 && 
          pred.probability > 0 && 
          pred.probability <= 1
        );
      
      console.log(`üéØ Pr√©dictions LSTM: ${predictions.slice(0, 5).map(p => `${p.number}(${(p.probability * 100).toFixed(1)}%)`).join(', ')}`);
      
      // Nettoyer
      model.dispose();
      
      return isValid && metrics.accuracy > 0;
      
    } catch (error) {
      console.error('‚ùå Erreur lors du test LSTM:', error);
      return false;
    }
  }

  /**
   * Test de comparaison des algorithmes
   */
  static async testAlgorithmComparison(): Promise<boolean> {
    console.log('‚öñÔ∏è Test de comparaison des algorithmes...');
    
    try {
      const results = await SyncService.getDrawResults('Cash', 100);
      
      if (results.length < 50) {
        console.warn('‚ö†Ô∏è Donn√©es insuffisantes pour la comparaison');
        return false;
      }
      
      // Tester chaque algorithme
      const algorithms: Array<'XGBoost' | 'RNN-LSTM' | 'Hybrid'> = ['XGBoost', 'RNN-LSTM', 'Hybrid'];
      const results_comparison: Array<{ algorithm: string; confidence: number; time: number }> = [];
      
      for (const algorithm of algorithms) {
        const startTime = Date.now();
        
        try {
          const prediction = await PredictionService.generatePrediction(
            'Cash',
            results,
            algorithm
          );
          
          const time = Date.now() - startTime;
          
          results_comparison.push({
            algorithm,
            confidence: prediction.confidence,
            time
          });
          
          console.log(`${algorithm}: Confiance=${(prediction.confidence * 100).toFixed(1)}%, Temps=${time}ms`);
          
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur avec ${algorithm}:`, error);
        }
      }
      
      // Afficher les r√©sultats
      console.log('\nüìä R√©sultats de comparaison:');
      results_comparison
        .sort((a, b) => b.confidence - a.confidence)
        .forEach((result, index) => {
          console.log(`${index + 1}. ${result.algorithm}: ${(result.confidence * 100).toFixed(1)}% (${result.time}ms)`);
        });
      
      return results_comparison.length > 0;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la comparaison:', error);
      return false;
    }
  }

  /**
   * Test de performance et de m√©moire
   */
  static async testPerformance(): Promise<boolean> {
    console.log('‚ö° Test de performance et m√©moire...');
    
    try {
      const startMemory = (performance as any).memory?.usedJSHeapSize || 0;
      const startTime = Date.now();
      
      // Test avec plusieurs tirages
      const drawNames = ['Cash', 'R√©veil', 'Fortune'];
      let totalPredictions = 0;
      
      for (const drawName of drawNames) {
        const results = await SyncService.getDrawResults(drawName, 50);
        
        if (results.length >= 30) {
          const prediction = await PredictionService.generatePrediction(
            drawName,
            results,
            'Hybrid'
          );
          totalPredictions++;
          console.log(`‚úÖ ${drawName}: ${prediction.numbers.length} pr√©dictions`);
        }
      }
      
      const endTime = Date.now();
      const endMemory = (performance as any).memory?.usedJSHeapSize || 0;
      
      const totalTime = endTime - startTime;
      const memoryUsed = endMemory - startMemory;
      
      console.log(`üìä Performance:`);
      console.log(`  - Pr√©dictions g√©n√©r√©es: ${totalPredictions}`);
      console.log(`  - Temps total: ${totalTime}ms`);
      console.log(`  - Temps moyen: ${(totalTime / totalPredictions).toFixed(0)}ms/pr√©diction`);
      
      if (memoryUsed > 0) {
        console.log(`  - M√©moire utilis√©e: ${(memoryUsed / 1024 / 1024).toFixed(1)}MB`);
      }
      
      return totalPredictions > 0 && totalTime < 30000; // Moins de 30 secondes
      
    } catch (error) {
      console.error('‚ùå Erreur lors du test de performance:', error);
      return false;
    }
  }

  /**
   * Lance tous les tests
   */
  static async runAllTests(): Promise<void> {
    console.log('üöÄ D√©marrage de la suite de tests de pr√©diction...\n');
    
    const tests = [
      { name: 'Test de base', fn: this.testBasicPrediction },
      { name: 'Ing√©nierie des features', fn: this.testFeatureEngineering },
      { name: 'Mod√®le XGBoost', fn: this.testXGBoostModel },
      { name: 'Mod√®le RNN-LSTM', fn: this.testRNNLSTMModel },
      { name: 'Comparaison algorithmes', fn: this.testAlgorithmComparison },
      { name: 'Performance', fn: this.testPerformance }
    ];
    
    const results: Array<{ name: string; success: boolean; duration: number }> = [];
    
    for (const test of tests) {
      console.log(`\nüß™ ${test.name}...`);
      const startTime = Date.now();
      
      try {
        const success = await test.fn();
        const duration = Date.now() - startTime;
        
        results.push({ name: test.name, success, duration });
        console.log(`${success ? '‚úÖ' : '‚ùå'} ${test.name}: ${success ? 'SUCC√àS' : '√âCHEC'} (${duration}ms)`);
        
      } catch (error) {
        const duration = Date.now() - startTime;
        results.push({ name: test.name, success: false, duration });
        console.error(`‚ùå ${test.name}: ERREUR (${duration}ms)`, error);
      }
    }
    
    // R√©sum√© final
    console.log('\nüìã R√âSUM√â DES TESTS:');
    console.log('='.repeat(50));
    
    results.forEach(result => {
      console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${result.name}: ${result.success ? 'SUCC√àS' : '√âCHEC'} (${result.duration}ms)`);
    });
    
    const successCount = results.filter(r => r.success).length;
    const totalTime = results.reduce((sum, r) => sum + r.duration, 0);
    
    console.log('='.repeat(50));
    console.log(`üèÜ R√âSULTAT GLOBAL: ${successCount}/${results.length} tests r√©ussis`);
    console.log(`‚è±Ô∏è Temps total: ${totalTime}ms`);
    console.log(`${successCount === results.length ? 'üéâ TOUS LES TESTS R√âUSSIS!' : '‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â'}`);
  }
}

// Exporter pour utilisation dans la console
if (typeof window !== 'undefined') {
  (window as any).PredictionTests = PredictionTestSuite;
  
  console.log('üß™ Tests de pr√©diction disponibles:');
  console.log('  - window.PredictionTests.runAllTests(): Lance tous les tests');
  console.log('  - window.PredictionTests.testBasicPrediction(): Test de base');
  console.log('  - window.PredictionTests.testXGBoostModel(): Test XGBoost');
  console.log('  - window.PredictionTests.testRNNLSTMModel(): Test LSTM');
}
