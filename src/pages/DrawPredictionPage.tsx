import { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { LotteryNumber } from '@/components/LotteryNumber';
import { AdvancedPredictionDisplay } from '@/components/AdvancedPredictionDisplay';
import { PredictionService, PredictionResult } from '@/services/predictionService';
import { SyncService } from '@/services/syncService';
import { DrawResult } from '@/services/lotteryAPI';
import { ArrowLeft, Brain, Zap, Loader2, TrendingUp, Settings, BarChart3, Activity, Cpu } from 'lucide-react';

// Interface locale supprim√©e - utilisation de celle du service

export function DrawPredictionPage() {
  const { drawName } = useParams<{ drawName: string }>();
  const [prediction, setPrediction] = useState<PredictionResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [selectedAlgorithm, setSelectedAlgorithm] = useState<'XGBoost' | 'RNN-LSTM' | 'Hybrid'>('Hybrid');
  const [modelInfo, setModelInfo] = useState<any>(null);
  const [trainingInProgress, setTrainingInProgress] = useState(false);

  const generatePrediction = async (algorithm: 'XGBoost' | 'RNN-LSTM' | 'Hybrid' = selectedAlgorithm) => {
    if (!drawName) return;

    try {
      setLoading(true);
      setError('');

      console.log(`üéØ G√©n√©ration de pr√©diction ${algorithm} pour ${drawName}...`);

      // R√©cup√©rer les donn√©es historiques via le service de synchronisation
      const results = await SyncService.getDrawResults(drawName, 200);

      if (results.length < 30) {
        throw new Error('Donn√©es insuffisantes pour g√©n√©rer une pr√©diction fiable (minimum 30 tirages)');
      }

      console.log(`üìä ${results.length} tirages r√©cup√©r√©s pour l'analyse`);

      // V√©rifier si les mod√®les sont initialis√©s
      const modelsInfo = PredictionService.getModelsInfo();
      setModelInfo(modelsInfo);

      if (!modelsInfo.isInitialized) {
        console.log('ü§ñ Initialisation des mod√®les...');
        await PredictionService.initializeModels();
      }

      // G√©n√©rer la pr√©diction avec le nouveau syst√®me
      const predictionResult = await PredictionService.generatePrediction(
        drawName,
        results,
        algorithm
      );

      setPrediction(predictionResult);
      console.log('‚úÖ Pr√©diction g√©n√©r√©e avec succ√®s');

    } catch (err) {
      console.error('‚ùå Erreur lors de la g√©n√©ration:', err);
      setError(err instanceof Error ? err.message : 'Erreur lors de la g√©n√©ration de la pr√©diction');
    } finally {
      setLoading(false);
    }
  };

  const handleAlgorithmChange = (algorithm: string) => {
    const alg = algorithm as 'XGBoost' | 'RNN-LSTM' | 'Hybrid';
    setSelectedAlgorithm(alg);
    generatePrediction(alg);
  };

  const handleTrainModels = async () => {
    if (!drawName) return;

    try {
      setTrainingInProgress(true);
      console.log('üéì D√©but de l\'entra√Ænement des mod√®les...');

      // R√©cup√©rer toutes les donn√©es disponibles pour l'entra√Ænement
      const allResults = await SyncService.getDrawResults(drawName, 1000);

      if (allResults.length < 50) {
        throw new Error('Donn√©es insuffisantes pour l\'entra√Ænement (minimum 50 tirages)');
      }

      // Entra√Æner les mod√®les
      const metrics = await PredictionService.trainModels(allResults);
      console.log('üèÜ Entra√Ænement termin√©:', metrics);

      // R√©g√©n√©rer la pr√©diction avec les mod√®les entra√Æn√©s
      await generatePrediction();

    } catch (err) {
      console.error('‚ùå Erreur lors de l\'entra√Ænement:', err);
      setError(err instanceof Error ? err.message : 'Erreur lors de l\'entra√Ænement des mod√®les');
    } finally {
      setTrainingInProgress(false);
    }
  };

  useEffect(() => {
    generatePrediction();
  }, [drawName]);

  if (!drawName) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <p className="text-muted-foreground">Tirage non sp√©cifi√©</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        {/* En-t√™te */}
        <div className="flex items-center gap-4 mb-8">
          <Link to="/" className="flex items-center gap-2 text-muted-foreground hover:text-foreground">
            <ArrowLeft className="h-4 w-4" />
            Retour
          </Link>
          <div className="h-4 w-px bg-border" />
          <h1 className="text-2xl font-bold">Pr√©diction IA pour {drawName}</h1>
        </div>

        {/* Informations sur les mod√®les */}
        {modelInfo && (
          <Alert className="mb-6">
            <Settings className="h-4 w-4" />
            <AlertDescription>
              <div className="flex items-center justify-between">
                <span>
                  Mod√®les: {modelInfo.isInitialized ? '‚úÖ Initialis√©s' : '‚ö†Ô∏è Non initialis√©s'}
                  {modelInfo.xgboost?.isTrained && ' | XGBoost: Entra√Æn√©'}
                  {modelInfo.lstm?.isTrained && ' | LSTM: Entra√Æn√©'}
                </span>
                {!modelInfo.xgboost?.isTrained || !modelInfo.lstm?.isTrained ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleTrainModels}
                    disabled={trainingInProgress}
                  >
                    {trainingInProgress ? (
                      <>
                        <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                        Entra√Ænement...
                      </>
                    ) : (
                      <>
                        <Brain className="h-3 w-3 mr-1" />
                        Entra√Æner les Mod√®les
                      </>
                    )}
                  </Button>
                ) : null}
              </div>
            </AlertDescription>
          </Alert>
        )}

        {/* Composant de pr√©diction avanc√© */}
        <AdvancedPredictionDisplay
          prediction={prediction}
          loading={loading}
          error={error}
          onRefresh={() => generatePrediction()}
          onAlgorithmChange={handleAlgorithmChange}
        />

        <div className="grid gap-8">
          {/* Pr√©diction principale */}
          {prediction ? (
            <>
              <Card className="gradient-card border-border">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-2 text-foreground">
                      <TrendingUp className="h-5 w-5 text-primary" />
                      Num√©ros pr√©dits pour le prochain tirage
                    </CardTitle>
                    <Badge 
                      variant="outline" 
                      className={`
                        ${prediction.confidence > 0.8 ? 'border-green-400 text-green-400' : 
                          prediction.confidence > 0.6 ? 'border-yellow-400 text-yellow-400' : 
                          'border-red-400 text-red-400'}
                      `}
                    >
                      Confiance: {(prediction.confidence * 100).toFixed(1)}%
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="flex gap-3 justify-center">
                    {prediction.numbers.map((item, index) => (
                      <div key={index} className="text-center space-y-2">
                        <LotteryNumber number={item.number} />
                        <div className="text-xs text-muted-foreground">
                          {(item.probability * 100).toFixed(1)}%
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  <div className="text-center text-sm text-muted-foreground">
                    Algorithme utilis√©: <span className="text-primary font-medium">{prediction.algorithm}</span>
                  </div>
                </CardContent>
              </Card>

              {/* D√©tails de l'algorithme */}
              <div className="grid md:grid-cols-2 gap-6">
                <Card className="gradient-card border-border">
                  <CardHeader>
                    <CardTitle className="text-foreground">Caract√©ristiques analys√©es</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {prediction.features.map((feature, index) => (
                        <div key={index} className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-primary rounded-full" />
                          <span className="text-foreground">{feature}</span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                <Card className="gradient-card border-border">
                  <CardHeader>
                    <CardTitle className="text-foreground">M√©thode hybride</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <span className="text-foreground">XGBoost</span>
                        <Badge variant="outline">Patterns tabulaires</Badge>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-foreground">RNN-LSTM</span>
                        <Badge variant="outline">S√©quences temporelles</Badge>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-foreground">Ensemble</span>
                        <Badge variant="outline">Fusion intelligente</Badge>
                      </div>
                    </div>
                    
                    <div className="pt-4 border-t border-border">
                      <p className="text-sm text-muted-foreground">
                        Les pr√©dictions combinent l'analyse des patterns historiques 
                        avec les tendances temporelles pour optimiser la pr√©cision.
                      </p>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </>
          ) : (
            !loading && !error && (
              <Card className="gradient-card border-border">
                <CardContent className="py-12">
                  <div className="text-center space-y-4">
                    <Brain className="h-12 w-12 text-muted-foreground mx-auto" />
                    <div>
                      <h3 className="text-lg font-semibold text-foreground">Aucune pr√©diction disponible</h3>
                      <p className="text-sm text-muted-foreground">
                        Cliquez sur "G√©n√©rer Pr√©diction" pour commencer l'analyse
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )
          )}

          {/* Avertissement */}
          <Card className="gradient-card border-border border-yellow-500/50">
            <CardContent className="py-6">
              <div className="flex items-start gap-3">
                <div className="w-6 h-6 bg-yellow-500/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <div className="w-2 h-2 bg-yellow-500 rounded-full" />
                </div>
                <div className="space-y-2">
                  <h4 className="font-semibold text-foreground">Avertissement important</h4>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    Ces pr√©dictions sont g√©n√©r√©es par des algorithmes d'apprentissage automatique 
                    bas√©s sur l'analyse de donn√©es historiques. Elles ne garantissent en aucun cas 
                    les r√©sultats futurs. Les jeux de hasard comportent des risques. 
                    Jouez avec mod√©ration et de mani√®re responsable.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}